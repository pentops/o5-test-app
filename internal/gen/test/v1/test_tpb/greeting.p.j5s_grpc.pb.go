// Generated by j5build v0.0.0-20250403212908-de7c3c2e6cce. DO NOT EDIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: test/v1/topic/greeting.p.j5s.proto

package test_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetingPublishTopic_GreetingEvent_FullMethodName = "/test.v1.topic.GreetingPublishTopic/GreetingEvent"
)

// GreetingPublishTopicClient is the client API for GreetingPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingPublishTopicClient interface {
	GreetingEvent(ctx context.Context, in *GreetingEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type greetingPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingPublishTopicClient(cc grpc.ClientConnInterface) GreetingPublishTopicClient {
	return &greetingPublishTopicClient{cc}
}

func (c *greetingPublishTopicClient) GreetingEvent(ctx context.Context, in *GreetingEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GreetingPublishTopic_GreetingEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingPublishTopicServer is the server API for GreetingPublishTopic service.
// All implementations must embed UnimplementedGreetingPublishTopicServer
// for forward compatibility
type GreetingPublishTopicServer interface {
	GreetingEvent(context.Context, *GreetingEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedGreetingPublishTopicServer()
}

// UnimplementedGreetingPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingPublishTopicServer struct {
}

func (UnimplementedGreetingPublishTopicServer) GreetingEvent(context.Context, *GreetingEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetingEvent not implemented")
}
func (UnimplementedGreetingPublishTopicServer) mustEmbedUnimplementedGreetingPublishTopicServer() {}

// UnsafeGreetingPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingPublishTopicServer will
// result in compilation errors.
type UnsafeGreetingPublishTopicServer interface {
	mustEmbedUnimplementedGreetingPublishTopicServer()
}

func RegisterGreetingPublishTopicServer(s grpc.ServiceRegistrar, srv GreetingPublishTopicServer) {
	s.RegisterService(&GreetingPublishTopic_ServiceDesc, srv)
}

func _GreetingPublishTopic_GreetingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingPublishTopicServer).GreetingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingPublishTopic_GreetingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingPublishTopicServer).GreetingEvent(ctx, req.(*GreetingEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetingPublishTopic_ServiceDesc is the grpc.ServiceDesc for GreetingPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.topic.GreetingPublishTopic",
	HandlerType: (*GreetingPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetingEvent",
			Handler:    _GreetingPublishTopic_GreetingEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/topic/greeting.p.j5s.proto",
}
