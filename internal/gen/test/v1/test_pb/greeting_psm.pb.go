// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package test_pb

import (
	context "context"
	fmt "fmt"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM GreetingPSM

type GreetingPSM = psm.StateMachine[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]

type GreetingPSMDB = psm.DBStateMachine[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]

type GreetingPSMEventer = psm.Eventer[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]

type GreetingPSMEventSpec = psm.EventSpec[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]

type GreetingPSMEventKey = string

const (
	GreetingPSMEventNil       GreetingPSMEventKey = "<nil>"
	GreetingPSMEventInitiated GreetingPSMEventKey = "initiated"
	GreetingPSMEventReplied   GreetingPSMEventKey = "replied"
)

// EXTEND GreetingKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *GreetingKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *GreetingKeys) PSMFullName() string {
	return "test.v1.greeting"
}

// EXTEND GreetingState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *GreetingState) PSMIsSet() bool {
	return msg != nil
}

func (msg *GreetingState) PSMMetadata() *psm_pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *GreetingState) PSMKeys() *GreetingKeys {
	return msg.Keys
}

func (msg *GreetingState) SetStatus(status GreetingStatus) {
	msg.Status = status
}

func (msg *GreetingState) SetPSMKeys(inner *GreetingKeys) {
	msg.Keys = inner
}

func (msg *GreetingState) PSMData() *GreetingStateData {
	if msg.Data == nil {
		msg.Data = &GreetingStateData{}
	}
	return msg.Data
}

// EXTEND GreetingStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *GreetingStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND GreetingEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *GreetingEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *GreetingEvent) PSMMetadata() *psm_pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *GreetingEvent) PSMKeys() *GreetingKeys {
	return msg.Keys
}

func (msg *GreetingEvent) SetPSMKeys(inner *GreetingKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the GreetingPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *GreetingEvent) PSMEventKey() GreetingPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return GreetingPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *GreetingEvent) UnwrapPSMEvent() GreetingPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *GreetingEventType_Initiated_:
		return v.Initiated
	case *GreetingEventType_Replied_:
		return v.Replied
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *GreetingEvent) SetPSMEvent(inner GreetingPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &GreetingEventType{}
	}
	switch v := inner.(type) {
	case *GreetingEventType_Initiated:
		msg.Event.Type = &GreetingEventType_Initiated_{Initiated: v}
	case *GreetingEventType_Replied:
		msg.Event.Type = &GreetingEventType_Replied_{Replied: v}
	default:
		return fmt.Errorf("invalid type %T for GreetingEventType", v)
	}
	return nil
}

type GreetingPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() GreetingPSMEventKey
}

// EXTEND GreetingEventType_Initiated with the GreetingPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *GreetingEventType_Initiated) PSMIsSet() bool {
	return msg != nil
}

func (*GreetingEventType_Initiated) PSMEventKey() GreetingPSMEventKey {
	return GreetingPSMEventInitiated
}

// EXTEND GreetingEventType_Replied with the GreetingPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *GreetingEventType_Replied) PSMIsSet() bool {
	return msg != nil
}

func (*GreetingEventType_Replied) PSMEventKey() GreetingPSMEventKey {
	return GreetingPSMEventReplied
}

type GreetingPSMTableSpec = psm.PSMTableSpec[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]

var DefaultGreetingPSMTableSpec = GreetingPSMTableSpec{
	State: psm.TableSpec[*GreetingState]{
		TableName:  "greeting",
		DataColumn: "state",
		StoreExtraColumns: func(state *GreetingState) (map[string]interface{}, error) {
			return map[string]interface{}{}, nil
		},
		PKFieldPaths: []string{
			"keys.greeting_id",
		},
	},
	Event: psm.TableSpec[*GreetingEvent]{
		TableName:  "greeting_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *GreetingEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":          metadata.EventId,
				"timestamp":   metadata.Timestamp,
				"cause":       metadata.Cause,
				"sequence":    metadata.Sequence,
				"greeting_id": event.Keys.GreetingId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.EventId",
		},
	},
	EventPrimaryKey: func(id string, keys *GreetingKeys) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": id,
		}, nil
	},
	PrimaryKey: func(keys *GreetingKeys) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": keys.GreetingId,
		}, nil
	},
}

func DefaultGreetingPSMConfig() *psm.StateMachineConfig[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.NewStateMachineConfig[
		*GreetingKeys,      // implements psm.IKeyset
		*GreetingState,     // implements psm.IState
		GreetingStatus,     // implements psm.IStatusEnum
		*GreetingStateData, // implements psm.IStateData
		*GreetingEvent,     // implements psm.IEvent
		GreetingPSMEvent,   // implements psm.IInnerEvent
	](DefaultGreetingPSMTableSpec)
}

func NewGreetingPSM(config *psm.StateMachineConfig[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]) (*GreetingPSM, error) {
	return psm.NewStateMachine[
		*GreetingKeys,      // implements psm.IKeyset
		*GreetingState,     // implements psm.IState
		GreetingStatus,     // implements psm.IStatusEnum
		*GreetingStateData, // implements psm.IStateData
		*GreetingEvent,     // implements psm.IEvent
		GreetingPSMEvent,   // implements psm.IInnerEvent
	](config)
}

func GreetingPSMMutation[SE GreetingPSMEvent](cb func(*GreetingStateData, SE) error) psm.PSMMutationFunc[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
	SE,                 // Specific event type for the transition
] {
	return psm.PSMMutationFunc[
		*GreetingKeys,      // implements psm.IKeyset
		*GreetingState,     // implements psm.IState
		GreetingStatus,     // implements psm.IStatusEnum
		*GreetingStateData, // implements psm.IStateData
		*GreetingEvent,     // implements psm.IEvent
		GreetingPSMEvent,   // implements psm.IInnerEvent
		SE,                 // Specific event type for the transition
	](cb)
}

type GreetingPSMHookBaton = psm.HookBaton[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
]

func GreetingPSMHook[SE GreetingPSMEvent](cb func(context.Context, sqrlx.Transaction, GreetingPSMHookBaton, *GreetingState, SE) error) psm.PSMHookFunc[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
	SE,                 // Specific event type for the transition
] {
	return psm.PSMHookFunc[
		*GreetingKeys,      // implements psm.IKeyset
		*GreetingState,     // implements psm.IState
		GreetingStatus,     // implements psm.IStatusEnum
		*GreetingStateData, // implements psm.IStateData
		*GreetingEvent,     // implements psm.IEvent
		GreetingPSMEvent,   // implements psm.IInnerEvent
		SE,                 // Specific event type for the transition
	](cb)
}
func GreetingPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, GreetingPSMHookBaton, *GreetingState, *GreetingEvent) error) psm.GeneralStateHook[
	*GreetingKeys,      // implements psm.IKeyset
	*GreetingState,     // implements psm.IState
	GreetingStatus,     // implements psm.IStatusEnum
	*GreetingStateData, // implements psm.IStateData
	*GreetingEvent,     // implements psm.IEvent
	GreetingPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*GreetingKeys,      // implements psm.IKeyset
		*GreetingState,     // implements psm.IState
		GreetingStatus,     // implements psm.IStatusEnum
		*GreetingStateData, // implements psm.IStateData
		*GreetingEvent,     // implements psm.IEvent
		GreetingPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
