// Generated by j5build v0.0.0-20250326003532-4b075335184f+dirty. DO NOT EDIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: test/v1/service/greeting.p.j5s.proto

package test_spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetingQueryService_GreetingGet_FullMethodName    = "/test.v1.service.GreetingQueryService/GreetingGet"
	GreetingQueryService_GreetingList_FullMethodName   = "/test.v1.service.GreetingQueryService/GreetingList"
	GreetingQueryService_GreetingEvents_FullMethodName = "/test.v1.service.GreetingQueryService/GreetingEvents"
)

// GreetingQueryServiceClient is the client API for GreetingQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingQueryServiceClient interface {
	GreetingGet(ctx context.Context, in *GreetingGetRequest, opts ...grpc.CallOption) (*GreetingGetResponse, error)
	GreetingList(ctx context.Context, in *GreetingListRequest, opts ...grpc.CallOption) (*GreetingListResponse, error)
	GreetingEvents(ctx context.Context, in *GreetingEventsRequest, opts ...grpc.CallOption) (*GreetingEventsResponse, error)
}

type greetingQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingQueryServiceClient(cc grpc.ClientConnInterface) GreetingQueryServiceClient {
	return &greetingQueryServiceClient{cc}
}

func (c *greetingQueryServiceClient) GreetingGet(ctx context.Context, in *GreetingGetRequest, opts ...grpc.CallOption) (*GreetingGetResponse, error) {
	out := new(GreetingGetResponse)
	err := c.cc.Invoke(ctx, GreetingQueryService_GreetingGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingQueryServiceClient) GreetingList(ctx context.Context, in *GreetingListRequest, opts ...grpc.CallOption) (*GreetingListResponse, error) {
	out := new(GreetingListResponse)
	err := c.cc.Invoke(ctx, GreetingQueryService_GreetingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingQueryServiceClient) GreetingEvents(ctx context.Context, in *GreetingEventsRequest, opts ...grpc.CallOption) (*GreetingEventsResponse, error) {
	out := new(GreetingEventsResponse)
	err := c.cc.Invoke(ctx, GreetingQueryService_GreetingEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingQueryServiceServer is the server API for GreetingQueryService service.
// All implementations must embed UnimplementedGreetingQueryServiceServer
// for forward compatibility
type GreetingQueryServiceServer interface {
	GreetingGet(context.Context, *GreetingGetRequest) (*GreetingGetResponse, error)
	GreetingList(context.Context, *GreetingListRequest) (*GreetingListResponse, error)
	GreetingEvents(context.Context, *GreetingEventsRequest) (*GreetingEventsResponse, error)
	mustEmbedUnimplementedGreetingQueryServiceServer()
}

// UnimplementedGreetingQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingQueryServiceServer struct {
}

func (UnimplementedGreetingQueryServiceServer) GreetingGet(context.Context, *GreetingGetRequest) (*GreetingGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetingGet not implemented")
}
func (UnimplementedGreetingQueryServiceServer) GreetingList(context.Context, *GreetingListRequest) (*GreetingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetingList not implemented")
}
func (UnimplementedGreetingQueryServiceServer) GreetingEvents(context.Context, *GreetingEventsRequest) (*GreetingEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetingEvents not implemented")
}
func (UnimplementedGreetingQueryServiceServer) mustEmbedUnimplementedGreetingQueryServiceServer() {}

// UnsafeGreetingQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingQueryServiceServer will
// result in compilation errors.
type UnsafeGreetingQueryServiceServer interface {
	mustEmbedUnimplementedGreetingQueryServiceServer()
}

func RegisterGreetingQueryServiceServer(s grpc.ServiceRegistrar, srv GreetingQueryServiceServer) {
	s.RegisterService(&GreetingQueryService_ServiceDesc, srv)
}

func _GreetingQueryService_GreetingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingQueryServiceServer).GreetingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingQueryService_GreetingGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingQueryServiceServer).GreetingGet(ctx, req.(*GreetingGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingQueryService_GreetingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingQueryServiceServer).GreetingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingQueryService_GreetingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingQueryServiceServer).GreetingList(ctx, req.(*GreetingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingQueryService_GreetingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingQueryServiceServer).GreetingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingQueryService_GreetingEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingQueryServiceServer).GreetingEvents(ctx, req.(*GreetingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetingQueryService_ServiceDesc is the grpc.ServiceDesc for GreetingQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.service.GreetingQueryService",
	HandlerType: (*GreetingQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetingGet",
			Handler:    _GreetingQueryService_GreetingGet_Handler,
		},
		{
			MethodName: "GreetingList",
			Handler:    _GreetingQueryService_GreetingList_Handler,
		},
		{
			MethodName: "GreetingEvents",
			Handler:    _GreetingQueryService_GreetingEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/service/greeting.p.j5s.proto",
}

const (
	GreetingCommandService_Hello_FullMethodName = "/test.v1.service.GreetingCommandService/Hello"
)

// GreetingCommandServiceClient is the client API for GreetingCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingCommandServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greetingCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingCommandServiceClient(cc grpc.ClientConnInterface) GreetingCommandServiceClient {
	return &greetingCommandServiceClient{cc}
}

func (c *greetingCommandServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, GreetingCommandService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingCommandServiceServer is the server API for GreetingCommandService service.
// All implementations must embed UnimplementedGreetingCommandServiceServer
// for forward compatibility
type GreetingCommandServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedGreetingCommandServiceServer()
}

// UnimplementedGreetingCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingCommandServiceServer struct {
}

func (UnimplementedGreetingCommandServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedGreetingCommandServiceServer) mustEmbedUnimplementedGreetingCommandServiceServer() {
}

// UnsafeGreetingCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingCommandServiceServer will
// result in compilation errors.
type UnsafeGreetingCommandServiceServer interface {
	mustEmbedUnimplementedGreetingCommandServiceServer()
}

func RegisterGreetingCommandServiceServer(s grpc.ServiceRegistrar, srv GreetingCommandServiceServer) {
	s.RegisterService(&GreetingCommandService_ServiceDesc, srv)
}

func _GreetingCommandService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingCommandServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingCommandService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingCommandServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetingCommandService_ServiceDesc is the grpc.ServiceDesc for GreetingCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.service.GreetingCommandService",
	HandlerType: (*GreetingCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GreetingCommandService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/service/greeting.p.j5s.proto",
}
