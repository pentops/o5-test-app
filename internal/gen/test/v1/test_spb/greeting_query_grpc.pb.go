// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: test/v1/service/greeting_query.proto

package test_spb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetingQueryService_GetGreeting_FullMethodName        = "/test.v1.service.GreetingQueryService/GetGreeting"
	GreetingQueryService_ListGreetings_FullMethodName      = "/test.v1.service.GreetingQueryService/ListGreetings"
	GreetingQueryService_ListGreetingEvents_FullMethodName = "/test.v1.service.GreetingQueryService/ListGreetingEvents"
)

// GreetingQueryServiceClient is the client API for GreetingQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingQueryServiceClient interface {
	GetGreeting(ctx context.Context, in *GetGreetingRequest, opts ...grpc.CallOption) (*GetGreetingResponse, error)
	ListGreetings(ctx context.Context, in *ListGreetingsRequest, opts ...grpc.CallOption) (*ListGreetingsResponse, error)
	ListGreetingEvents(ctx context.Context, in *ListGreetingEventsRequest, opts ...grpc.CallOption) (*ListGreetingEventsResponse, error)
}

type greetingQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingQueryServiceClient(cc grpc.ClientConnInterface) GreetingQueryServiceClient {
	return &greetingQueryServiceClient{cc}
}

func (c *greetingQueryServiceClient) GetGreeting(ctx context.Context, in *GetGreetingRequest, opts ...grpc.CallOption) (*GetGreetingResponse, error) {
	out := new(GetGreetingResponse)
	err := c.cc.Invoke(ctx, GreetingQueryService_GetGreeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingQueryServiceClient) ListGreetings(ctx context.Context, in *ListGreetingsRequest, opts ...grpc.CallOption) (*ListGreetingsResponse, error) {
	out := new(ListGreetingsResponse)
	err := c.cc.Invoke(ctx, GreetingQueryService_ListGreetings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingQueryServiceClient) ListGreetingEvents(ctx context.Context, in *ListGreetingEventsRequest, opts ...grpc.CallOption) (*ListGreetingEventsResponse, error) {
	out := new(ListGreetingEventsResponse)
	err := c.cc.Invoke(ctx, GreetingQueryService_ListGreetingEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingQueryServiceServer is the server API for GreetingQueryService service.
// All implementations must embed UnimplementedGreetingQueryServiceServer
// for forward compatibility
type GreetingQueryServiceServer interface {
	GetGreeting(context.Context, *GetGreetingRequest) (*GetGreetingResponse, error)
	ListGreetings(context.Context, *ListGreetingsRequest) (*ListGreetingsResponse, error)
	ListGreetingEvents(context.Context, *ListGreetingEventsRequest) (*ListGreetingEventsResponse, error)
	mustEmbedUnimplementedGreetingQueryServiceServer()
}

// UnimplementedGreetingQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingQueryServiceServer struct {
}

func (UnimplementedGreetingQueryServiceServer) GetGreeting(context.Context, *GetGreetingRequest) (*GetGreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreeting not implemented")
}
func (UnimplementedGreetingQueryServiceServer) ListGreetings(context.Context, *ListGreetingsRequest) (*ListGreetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGreetings not implemented")
}
func (UnimplementedGreetingQueryServiceServer) ListGreetingEvents(context.Context, *ListGreetingEventsRequest) (*ListGreetingEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGreetingEvents not implemented")
}
func (UnimplementedGreetingQueryServiceServer) mustEmbedUnimplementedGreetingQueryServiceServer() {}

// UnsafeGreetingQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingQueryServiceServer will
// result in compilation errors.
type UnsafeGreetingQueryServiceServer interface {
	mustEmbedUnimplementedGreetingQueryServiceServer()
}

func RegisterGreetingQueryServiceServer(s grpc.ServiceRegistrar, srv GreetingQueryServiceServer) {
	s.RegisterService(&GreetingQueryService_ServiceDesc, srv)
}

func _GreetingQueryService_GetGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingQueryServiceServer).GetGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingQueryService_GetGreeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingQueryServiceServer).GetGreeting(ctx, req.(*GetGreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingQueryService_ListGreetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGreetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingQueryServiceServer).ListGreetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingQueryService_ListGreetings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingQueryServiceServer).ListGreetings(ctx, req.(*ListGreetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingQueryService_ListGreetingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGreetingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingQueryServiceServer).ListGreetingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingQueryService_ListGreetingEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingQueryServiceServer).ListGreetingEvents(ctx, req.(*ListGreetingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetingQueryService_ServiceDesc is the grpc.ServiceDesc for GreetingQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.service.GreetingQueryService",
	HandlerType: (*GreetingQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGreeting",
			Handler:    _GreetingQueryService_GetGreeting_Handler,
		},
		{
			MethodName: "ListGreetings",
			Handler:    _GreetingQueryService_ListGreetings_Handler,
		},
		{
			MethodName: "ListGreetingEvents",
			Handler:    _GreetingQueryService_ListGreetingEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/service/greeting_query.proto",
}
